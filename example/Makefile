# Makefile minimal et portable pour projets LaTeX
# Usage:
#   make            -> compile le PDF (cible `pdf`)
#   make pdf        -> m√™me chose
#   make view       -> ouvre le PDF (macOS `open`)
#   make watch      -> compilation continue si latexmk pr√©sent
#   make clean      -> supprime fichiers auxiliaires
#   make distclean  -> supprime tout le r√©pertoire de sortie

# Nom du fichier principal .tex (modifiable √† la ligne de commande)
# Par d√©faut, utiliser l'exemple fourni
MAIN ?= test-crypto.tex

# R√©pertoire de sortie
OUTDIR ?= build

# Moteur LaTeX par d√©faut (utilis√© si latexmk absent)
# Changer par d√©faut pour lualatex comme demand√©
LATEX_ENGINE ?= lualatex

# Commande CLI install√©e via pip
TRUSTNOCORPO ?= trustnocorpo

# Variables de cryptage/tra√ßabilit√©
CLASSIFICATION ?=
GENERATION_INFO := $(shell echo "$$USER@$$HOSTNAME" | base64 | tr -d '\n')
GENERATION_TIME := $(shell date '+%Y-%m-%d %H:%M:%S %Z' | base64 | tr -d '\n')
BUILD_HASH := $(shell echo "$(GENERATION_INFO)$(GENERATION_TIME)" | shasum -a 256 | cut -d' ' -f1 | head -c 16)

# (Les anciens scripts Python s√©par√©s ne sont plus n√©cessaires; la CLI g√®re tout)

# PDF Password (can be overridden)
PDF_PASSWORD ?=

# Watermark and footer options
# Example: make WATERMARK="CONFIDENTIAL" FOOTER_FP=yes
WATERMARK ?=
FOOTER_FP ?= no
ONLY_PASSWORD ?= no

# Derived CLI flags
BUILD_FLAGS := --classification="$(CLASSIFICATION)" --output-dir="$(OUTDIR)"
BUILD_FLAGS += $(if $(WATERMARK),--watermark="$(WATERMARK)",)
BUILD_FLAGS += $(if $(filter yes true 1,$(FOOTER_FP)),--footer-fingerprint,)
BUILD_FLAGS += $(if $(filter yes true 1,$(ONLY_PASSWORD)),--only-password,)

# Options latexmk (si pr√©sent)
LATEXMK := $(shell command -v latexmk 2>/dev/null || true)
# Force latexmk to use lualatex for PDF generation
# latexmk: -pdflatex="lualatex %O %S" tells latexmk to run lualatex when it would
# otherwise call pdflatex. Keep -pdf to produce PDF output.
LATEXMK_OPTS ?= -pdf -pdflatex="lualatex %O %S" -silent -interaction=nonstopmode -synctex=1
LATEXMK_OUTDIR := -outdir=$(OUTDIR)

# Fichier PDF final
PDF := $(OUTDIR)/$(basename $(notdir $(MAIN))).pdf

.PHONY: all init pdf view watch clean distclean check-tools
all: pdf

init:
	@$(TRUSTNOCORPO) init >/dev/null || { echo "‚ùå Initialization failed"; exit 1; }

pdf: init
	@mkdir -p "$(OUTDIR)"
	@$(TRUSTNOCORPO) build "$(MAIN)" $(BUILD_FLAGS) || { echo "‚ùå Build failed"; exit 1; }

view: pdf
	@echo "Opening $(PDF)"
	@open "$(PDF)"

watch:
	@sh -c 'if [ -n "$(LATEXMK)" ]; then latexmk -pvc $(LATEXMK_OPTS) -outdir="$(OUTDIR)" "$(MAIN)"; else echo "latexmk required for watch mode. Install it (TeX Live/MacTeX) or use \"make pdf\" repeatedly."; fi'

# Verify required tools are installed
check-tools:
	@echo "üîç Checking LaTeX toolchain..."
	@command -v lualatex >/dev/null 2>&1 && echo "‚úÖ lualatex found: $$(command -v lualatex)" || { echo "‚ùå lualatex not found. Install MacTeX or TinyTeX, then ensure /Library/TeX/texbin is on PATH."; exit 1; }
	@command -v latexmk >/dev/null 2>&1 && echo "‚úÖ latexmk found: $$(command -v latexmk)" || echo "‚ö†Ô∏è latexmk not found (optional; build will use lualatex directly)"
	@echo "Done."

clean:
	@echo "Removing common auxiliary files from $(OUTDIR)"
	@find $(OUTDIR) -type f \( -name "*.aux" -o -name "*.log" -o -name "*.toc" -o -name "*.out" -o -name "*.lof" -o -name "*.lot" -o -name "*.fls" -o -name "*.fdb_latexmk" -o -name "*.synctex.gz" -o -name "*.bbl" -o -name "*.blg" \) -delete || true

distclean: 
	@echo "Removing $(OUTDIR) entirely"
	@rm -rf "$(OUTDIR)"

# Utilisation recommand√©e:
#   make MAIN=paper.tex       # compile paper.tex
#   make pdf && make view
#   make CLASSIFICATION="FOR ALICE EYES ONLY" pdf    # compile avec classification
#   make CLASSIFICATION="RESTRICTED ACCESS" pdf      # autre exemple
# Remarques:
# - Ce Makefile cr√©e le dossier $(OUTDIR) et y place les fichiers de sortie.
# - Pr√©f√®re latexmk si disponible; sinon utilise $(LATEX_ENGINE).
# - Pour bibliographies plus avanc√©es (biber, biblatex) adaptez la section fallback.
# - Le syst√®me de cryptage int√®gre des informations de tra√ßabilit√© dans le PDF.

# Cibles de cryptage sp√©cialis√©es
.PHONY: confidential restricted secret setup-user user-info reset-user db-info db-reset protect-pdf unprotect-pdf

# Targets sp√©ciaux pour les utilisateurs
setup-user:
	@echo "üîê Setting up user encryption keys..."
	@$(TRUSTNOCORPO) keys --generate || echo "‚ö†Ô∏è  User setup failed"

user-info:
	@echo "üë§ User encryption information:"
	@$(TRUSTNOCORPO) keys --info || echo "‚ö†Ô∏è  User info failed (setup required: make setup-user)"

reset-user:
	@echo "üóëÔ∏è  Resetting user encryption keys..."
	@$(TRUSTNOCORPO) keys --reset || echo "‚ö†Ô∏è  User reset failed"

# Targets de classification sp√©cialis√©s avec protection PDF
confidential: CLASSIFICATION=CONFIDENTIAL
confidential: PROTECT_PDF=yes
confidential: pdf

secret: CLASSIFICATION=SECRET
secret: PROTECT_PDF=yes
secret: pdf

top-secret: CLASSIFICATION=TOP SECRET
top-secret: PROTECT_PDF=yes
top-secret: pdf

for-eyes-only: CLASSIFICATION=FOR $(USER) EYES ONLY
for-eyes-only: PROTECT_PDF=yes
for-eyes-only: pdf

# Gestion de la base de donn√©es
db-info:
	@echo "üìä System information:"
	@$(TRUSTNOCORPO) info || echo "‚ö†Ô∏è  Info failed"

db-reset:
	@echo "üóëÔ∏è  Database reset is not automated via Makefile."
	@echo "   If you really want to reset, remove the project's .trustnocorpo/builds.db file manually."
	@echo "   Warning: this is destructive and will remove all audit entries."

# Protection PDF post-build
protect-pdf:
	@if [ -f "$(PDF)" ]; then \
		echo "üîí Protecting existing PDF..."; \
		$(TRUSTNOCORPO) protect "$(PDF)" --build-hash="$(BUILD_HASH)" --classification="$(CLASSIFICATION)" || echo "‚ö†Ô∏è  PDF protection failed"; \
	else \
		echo "‚ùå PDF not found: $(PDF)"; \
		exit 1; \
	fi

# D√©protection PDF (pour tests)
unprotect-pdf:
	@if [ -f "$(PDF)" ]; then \
		echo "üîì Attempting to unprotect PDF..."; \
		$(TRUSTNOCORPO) protect --unprotect "$(PDF)" --build-hash="$(BUILD_HASH)" || echo "‚ö†Ô∏è  PDF unprotection failed"; \
	else \
		echo "‚ùå PDF not found: $(PDF)"; \
		exit 1; \
	fi
confidential:
	@$(MAKE) CLASSIFICATION="CONFIDENTIAL" pdf

restricted:
	@$(MAKE) CLASSIFICATION="RESTRICTED ACCESS" pdf

secret:
	@$(MAKE) CLASSIFICATION="SECRET" pdf

eyes-only:
	@if [ -z "$(FOR)" ]; then echo "Usage: make eyes-only FOR=USERNAME"; exit 1; fi
	@$(MAKE) CLASSIFICATION="FOR $(FOR) EYES ONLY" pdf

# Debug crypto info
debug-crypto:
	@echo "Generation Info (base64): $(GENERATION_INFO)"
	@echo "Decoded: $$(echo '$(GENERATION_INFO)' | base64 -d)"
	@echo "Generation Time (base64): $(GENERATION_TIME)"
	@echo "Decoded: $$(echo '$(GENERATION_TIME)' | base64 -d)"
	@echo "Build Hash: $(BUILD_HASH)"

# Database management
install-deps:
	@echo "Installing Python dependencies..."
	@pip3 install -r requirements.txt

db-list:
	@$(DB_MANAGER) list

db-stats:
	@$(DB_MANAGER) stats

db-show:
	@if [ -z "$(HASH)" ]; then echo "Usage: make db-show HASH=<build_hash>"; exit 1; fi
	@$(DB_MANAGER) show $(HASH)

db-verify:
	@if [ -z "$(HASH)" ]; then echo "Usage: make db-verify HASH=<build_hash>"; exit 1; fi
	@$(DB_MANAGER) verify $(HASH)

db-export:
	@$(DB_MANAGER) export -o builds_backup_$$(date +%Y%m%d_%H%M%S).json
	@echo "Base de donn√©es export√©e"

# Audit de s√©curit√© complet
security-audit:
	@python3 security_audit.py

# Aide pour les commandes de base de donn√©es
db-help:
	@echo "=== Commandes de gestion de base de donn√©es ==="
	@echo "make db-list              # Liste des builds r√©cents"
	@echo "make db-stats             # Statistiques g√©n√©rales"
	@echo "make db-show HASH=xxx     # D√©tails d'un build"
	@echo "make db-verify HASH=xxx   # V√©rifier l'int√©grit√©"
	@echo "make db-export            # Sauvegarder la base"
	@echo "make security-audit       # Audit de s√©curit√© complet"
	@echo "make install-deps         # Installer les d√©pendances Python"
